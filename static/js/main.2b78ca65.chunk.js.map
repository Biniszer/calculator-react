{"version":3,"sources":["DigitButton.js","OperationButton.js","App.js","index.js"],"names":["DigitButton","dispatch","digit","onClick","type","ACTIONS","ADD_DIGIT","payload","OperationButton","operation","CHOOSE_OPERATION","CLEAR","DELETE_DIGIT","EVALUATE","reducer","state","overwrite","currentOperand","includes","length","slice","previousOperand","evaluate","prev","parseFloat","current","isNaN","computation","toString","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","split","integer","decimal","format","App","useReducer","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b78ca65.chunk.js","sourcesContent":["import {ACTIONS} from './App'\r\n\r\nexport default function DigitButton({dispatch, digit}) {\r\n    return <button onClick={() => dispatch({type: ACTIONS.ADD_DIGIT, payload: {digit}})}>{digit}</button>\r\n}","import {ACTIONS} from './App'\r\n\r\nexport default function OperationButton({dispatch, operation}) {\r\n    return <button onClick={() => dispatch({type: ACTIONS.CHOOSE_OPERATION, payload: {operation}})}>{operation}</button>\r\n}","/* eslint-disable default-case */\r\nimport { useReducer } from \"react\"\r\nimport DigitButton from \"./DigitButton\"\r\nimport OperationButton from \"./OperationButton\"\r\nimport \"./styles.css\"\r\n\r\nexport const ACTIONS = {\r\n    ADD_DIGIT: 'add-digit',\r\n    CHOOSE_OPERATION: 'choose-operation',\r\n    CLEAR: 'clear',\r\n    DELETE_DIGIT: 'delete-digit',\r\n    EVALUATE: 'evaluate'\r\n}\r\n\r\nfunction reducer(state, {type, payload}) {\r\n    switch(type) {\r\n        case ACTIONS.ADD_DIGIT:\r\n            if (state.overwrite) {\r\n                return {\r\n                    ...state,\r\n                    currentOperand: payload.digit,\r\n                    overwrite: false,\r\n                }\r\n            }\r\n            if(payload.digit === \"0\" && state.currentOperand === \"0\") {\r\n                return state\r\n            }\r\n            if(payload.digit === \".\" && state.currentOperand.includes(\".\")) {\r\n                return state\r\n            }\r\n        \r\n        return {\r\n            ...state,\r\n            currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\r\n            }\r\n        case ACTIONS.CLEAR:\r\n            return {}\r\n        case ACTIONS.DELETE_DIGIT:\r\n            if (state.overwrite) {\r\n                return {\r\n                    ...state,\r\n                    overwrite: false,\r\n                    currentOperand: null\r\n                }\r\n            }\r\n            if (state.currentOperand == null) return state\r\n            if (state.currentOperand.length === 1) {\r\n                return {...state, currentOperand: null}\r\n            }\r\n            return {\r\n                ...state,\r\n                currentOperand: state.currentOperand.slice(0, -1)\r\n            }\r\n        case ACTIONS.EVALUATE:\r\n            if (\r\n                state.operation == null ||\r\n                state.currentOperand ==null ||\r\n                state.previousOperand == null\r\n                ) {\r\n                    return state\r\n                }\r\n\r\n                return {\r\n                    ...state,\r\n                    overwrite: true,\r\n                    previousOperand: null,\r\n                    currentOperand: evaluate(state),\r\n                }\r\n        case ACTIONS.CHOOSE_OPERATION:\r\n            if (state.currentOperand == null && state.previousOperand == null) {\r\n                return state\r\n            }\r\n\r\n            if (state.currentOperand == null) {\r\n                return {\r\n                    ...state,\r\n                    operation: payload.operation,\r\n                }\r\n            }\r\n\r\n            if (state.previousOperand == null) {\r\n                return {\r\n                    ...state,\r\n                    operation: payload.operation,\r\n                    previousOperand: state.currentOperand,\r\n                    currentOperand: null,\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                previousOperand: evaluate(state),\r\n                operation: payload.operation,\r\n                currentOperand: null,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction evaluate({ currentOperand, previousOperand, operation}) {\r\n    const prev = parseFloat(previousOperand)\r\n    const current = parseFloat(currentOperand)\r\n    if(isNaN(prev) || isNaN(current)) return \"\"\r\n    let computation = \"\"\r\n    switch (operation) {\r\n        case \"+\":\r\n            computation = prev + current\r\n            break\r\n        case \"-\":\r\n            computation = prev - current\r\n            break\r\n        case \"*\":\r\n            computation = prev * current\r\n            break\r\n        case \"/\":\r\n            computation = prev / current\r\n            break\r\n        \r\n    }\r\n\r\n    return computation.toString()\r\n}\r\n\r\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"pl-pl\", {\r\n    maximumFractionDigits: 0,\r\n})\r\nfunction formatOperand(operand) {\r\n    if (operand == null) return\r\n    const [integer, decimal] = operand.split('.')\r\n    if (decimal == null) return INTEGER_FORMATTER.format(integer)\r\n    return `${INTEGER_FORMATTER.format(integer)}.${decimal}`\r\n}\r\n\r\nfunction App() {\r\n    const [{currentOperand, previousOperand, operation}, dispatch] = useReducer(\r\n        reducer,\r\n        {}\r\n        )\r\n    \r\n    return (\r\n        <div className=\"calculator-grid\">\r\n            <div className=\"output\">\r\n                <div className=\"previous-operand\">{formatOperand(previousOperand)} {operation}</div>\r\n                <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\r\n            </div>\r\n            <button className=\"span-two\" onClick={() => dispatch({type: ACTIONS.CLEAR})}>AC</button>\r\n            <button onClick={() => dispatch({type: ACTIONS.DELETE_DIGIT})}>DEL</button>\r\n            <OperationButton operation=\"/\" dispatch={dispatch} />\r\n            <DigitButton digit=\"1\" dispatch={dispatch} />\r\n            <DigitButton digit=\"2\" dispatch={dispatch} />\r\n            <DigitButton digit=\"3\" dispatch={dispatch} />\r\n            <OperationButton operation=\"*\" dispatch={dispatch} />\r\n            <DigitButton digit=\"4\" dispatch={dispatch} />\r\n            <DigitButton digit=\"5\" dispatch={dispatch} />\r\n            <DigitButton digit=\"6\" dispatch={dispatch} />\r\n            <OperationButton operation=\"+\" dispatch={dispatch} />\r\n            <DigitButton digit=\"7\" dispatch={dispatch} />\r\n            <DigitButton digit=\"8\" dispatch={dispatch} />\r\n            <DigitButton digit=\"9\" dispatch={dispatch} />\r\n            <OperationButton operation=\"-\" dispatch={dispatch} />\r\n            <DigitButton digit=\".\" dispatch={dispatch} />\r\n            <DigitButton digit=\"0\" dispatch={dispatch} />\r\n            <button className=\"span-two\"  onClick={() => dispatch({type: ACTIONS.EVALUATE})}>=</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n      <App></App>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n  )"],"sourceRoot":""}